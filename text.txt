Imports System.IO
Imports System.ComponentModel
Imports System.Windows.Input

Public Class MyViewModel
    Implements INotifyPropertyChanged

    Private _cheminFichier As String
    Public Property CheminFichier As String
        Get
            Return _cheminFichier
        End Get
        Set(value As String)
            _cheminFichier = value
            OnPropertyChanged("CheminFichier")
            OnPropertyChanged("FichierCharge") ' Met à jour l'activation du bouton
        End Set
    End Property

    ' Propriété pour savoir si un fichier est chargé
    Public ReadOnly Property FichierCharge As Boolean
        Get
            Return Not String.IsNullOrEmpty(CheminFichier) AndAlso File.Exists(CheminFichier)
        End Get
    End Property

    ' Commande pour supprimer le fichier
    Public Property SupprimerFichierCommand As ICommand

    Public Sub New()
        ' Initialisation de la commande avec RelayCommand
        SupprimerFichierCommand = New RelayCommand(AddressOf SupprimerFichier, AddressOf PeutSupprimerFichier)
    End Sub

    ' Vérifie si on peut supprimer le fichier (CanExecute)
    Private Function PeutSupprimerFichier(parameter As Object) As Boolean
        Return FichierCharge
    End Function

    ' Suppression du fichier
    Private Sub SupprimerFichier(parameter As Object)
        Try
            If File.Exists(CheminFichier) Then
                File.Delete(CheminFichier)
                CheminFichier = "" ' Réinitialiser après suppression
                OnPropertyChanged("FichierCharge") ' Met à jour l'état du bouton
            End If
        Catch ex As Exception
            MessageBox.Show("Erreur lors de la suppression du fichier : " & ex.Message)
        End Try
    End Sub

    ' Gestion de la notification de changement de propriété
    Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Protected Sub OnPropertyChanged(propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub
End Class
Imports System.Windows.Input

Public Class RelayCommand
    Implements ICommand

    Private ReadOnly _execute As Action(Of Object)
    Private ReadOnly _canExecute As Func(Of Object, Boolean)

    Public Sub New(execute As Action(Of Object), Optional canExecute As Func(Of Object, Boolean) = Nothing)
        _execute = execute
        _canExecute = canExecute
    End Sub

    Public Event CanExecuteChanged As EventHandler Implements ICommand.CanExecuteChanged

    Public Function CanExecute(parameter As Object) As Boolean Implements ICommand.CanExecute
        Return _canExecute Is Nothing OrElse _canExecute(parameter)
    End Function

    Public Sub Execute(parameter As Object) Implements ICommand.Execute
        _execute(parameter)
    End Sub

    ' Notifie quand l'état de la commande change (ex: activer/désactiver le bouton)
    Public Sub RaiseCanExecuteChanged()
        RaiseEvent CanExecuteChanged(Me, EventArgs.Empty)
    End Sub
End Class
