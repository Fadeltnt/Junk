<Window x:Class="MonNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Ma Fenêtre"
        WindowState="Maximized"> <!-- Plein écran -->

    <Grid>
        <GroupBox Header="Titre du GroupBox"
                  Width="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Window}}"
                  Height="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Window}}"
                  HorizontalAlignment="Stretch"
                  VerticalAlignment="Stretch">
            <Grid>
                <TextBlock Text="Mon contenu" 
                           HorizontalAlignment="Center"
                           VerticalAlignment="Center"
                           FontSize="20"/>
            </Grid>
        </GroupBox>
    </Grid>
</Window>

Imports System.Collections.ObjectModel
Imports System.ComponentModel
Imports System.Windows.Input

Public Class FichierCommunicationViewModel
    Implements INotifyPropertyChanged

    Private _model As New FichierCommunicationModel()

    ' Propriétés bindées à la vue
    Private _identifiant As String
    Private _langue As String
    Private _nouveauCode As String

    ' Liste observable des codes
    Public Property Codes As New ObservableCollection(Of String)

    ' Propriétés avec notifications de changement
    Public Property Identifiant As String
        Get
            Return _identifiant
        End Get
        Set(value As String)
            _identifiant = value
            OnPropertyChanged("Identifiant")
        End Set
    End Property

    Public Property Langue As String
        Get
            Return _langue
        End Get
        Set(value As String)
            _langue = value
            OnPropertyChanged("Langue")
        End Set
    End Property

    Public Property NouveauCode As String
        Get
            Return _nouveauCode
        End Get
        Set(value As String)
            _nouveauCode = value
            OnPropertyChanged("NouveauCode")
        End Set
    End Property

    ' Commande pour ajouter un code
    Public ReadOnly Property AjouterCodeCommand As ICommand
        Get
            Return New RelayCommand(Sub()
                                        If Not String.IsNullOrWhiteSpace(NouveauCode) Then
                                            Codes.Add(NouveauCode)
                                            NouveauCode = "" ' Réinitialise le champ
                                        End If
                                    End Sub)
        End Get
    End Property

    ' Commande pour générer le fichier XML
    Public ReadOnly Property GenererXMLCommand As ICommand
        Get
            Return New RelayCommand(Sub()
                                        Dim cheminXML As String = "C:\temp\communication.xml"
                                        _model.GenererXML(cheminXML, Codes.ToList(), Identifiant, Langue)
                                        MsgBox("Fichier XML généré avec succès : " & cheminXML)
                                    End Sub)
        End Get
    End Property

    ' Événement pour notifier les changements
    Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Protected Sub OnPropertyChanged(propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub

End Class


<Button Content="Supprimer le fichier"
        Command="{Binding SupprimerFichierCommand}"
        IsEnabled="{Binding FichierCharge, Mode=OneWay}"
        Margin="10"/>

Imports System.IO
Imports System.ComponentModel
Imports System.Windows.Input

Public Class MyViewModel
    Implements INotifyPropertyChanged

    Private _cheminFichier As String
    Public Property CheminFichier As String
        Get
            Return _cheminFichier
        End Get
        Set(value As String)
            _cheminFichier = value
            OnPropertyChanged("CheminFichier")
            OnPropertyChanged("FichierCharge") ' Met à jour le bouton
        End Set
    End Property

    ' Propriété pour activer/désactiver le bouton de suppression
    Public ReadOnly Property FichierCharge As Boolean
        Get
            Return Not String.IsNullOrEmpty(CheminFichier) AndAlso File.Exists(CheminFichier)
        End Get
    End Property

    ' Commande pour supprimer le fichier
    Public ReadOnly Property SupprimerFichierCommand As ICommand
        Get
            Return New RelayCommand(AddressOf SupprimerFichier, Function() FichierCharge)
        End Get
    End Property

    ' Méthode pour supprimer le fichier
    Private Sub SupprimerFichier()
        Try
            If File.Exists(CheminFichier) Then
                File.Delete(CheminFichier)
                CheminFichier = "" ' Réinitialiser après suppression
            End If
        Catch ex As Exception
            MessageBox.Show("Erreur lors de la suppression du fichier : " & ex.Message)
        End Try
    End Sub

    ' Gestion de la notification de changement de propriété
    Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    Protected Sub OnPropertyChanged(propertyName As String)
        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
    End Sub
End Class

Imports System.Windows.Input

Public Class RelayCommand
    Implements ICommand

    Private ReadOnly _execute As Action
    Private ReadOnly _canExecute As Func(Of Boolean)

    Public Sub New(execute As Action, Optional canExecute As Func(Of Boolean) = Nothing)
        _execute = execute
        _canExecute = canExecute
    End Sub

    Public Event CanExecuteChanged As EventHandler Implements ICommand.CanExecuteChanged

    Public Function CanExecute(parameter As Object) As Boolean Implements ICommand.CanExecute
        Return _canExecute Is Nothing OrElse _canExecute.Invoke()
    End Function

    Public Sub Execute(parameter As Object) Implements ICommand.Execute
        _execute.Invoke()
    End Sub

    Public Sub RaiseCanExecuteChanged()
        RaiseEvent CanExecuteChanged(Me, EventArgs.Empty)
    End Sub
End Class
